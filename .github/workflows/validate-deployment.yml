name: 🚀 Deployment Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual trigger

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-typecheck:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔎 Run ESLint
        run: npm run lint

      - name: 🔍 Run TypeScript check
        run: npm run type-check

  test-development:
    name: 🧪 Development Tests
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run development tests
        run: |
          chmod +x scripts/test-local-dev.js
          node scripts/test-local-dev.js
        timeout-minutes: 5

  build-and-validate:
    name: 🏗️ Build & Validate
    runs-on: ubuntu-latest
    needs: test-development
    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build static site
        run: npm run build
        env:
          # Set base URL for GitHub Pages
          PUBLIC_BASE_URL: /LexMX

      - name: 🚀 Validate deployment readiness
        run: |
          chmod +x scripts/validate-deployment.js
          node scripts/validate-deployment.js

      - name: 📊 Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: dist/
          retention-days: 1

      - name: 📋 Validate specific files exist
        run: |
          echo "Checking critical files..."
          test -f dist/index.html || (echo "❌ index.html missing" && exit 1)
          test -f dist/manifest.json || (echo "❌ manifest.json missing" && exit 1)
          test -f dist/sw.js || (echo "❌ sw.js missing" && exit 1)
          test -f dist/legal-corpus/metadata.json || (echo "❌ corpus metadata missing" && exit 1)
          test -f dist/embeddings/embeddings-metadata.json || (echo "❌ embeddings metadata missing" && exit 1)
          echo "✅ All critical files present"

  test-build-output:
    name: 🔍 Test Build Output
    runs-on: ubuntu-latest
    needs: build-and-validate
    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 📊 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: dist/

      - name: 🔍 Analyze build size
        run: |
          echo "📊 Build size analysis:"
          du -sh dist/
          echo ""
          echo "📁 Largest files:"
          find dist/ -type f -exec du -h {} + | sort -hr | head -10
          echo ""
          echo "📈 File count by type:"
          find dist/ -name "*.html" | wc -l | xargs -I {} echo "HTML files: {}"
          find dist/ -name "*.js" | wc -l | xargs -I {} echo "JavaScript files: {}"
          find dist/ -name "*.css" | wc -l | xargs -I {} echo "CSS files: {}"
          find dist/ -name "*.json" | wc -l | xargs -I {} echo "JSON files: {}"

      - name: 🔍 Check for hardcoded URLs
        run: |
          echo "Checking for hardcoded localhost URLs..."
          if grep -r "localhost" dist/ --exclude-dir=node_modules; then
            echo "❌ Found hardcoded localhost URLs"
            exit 1
          fi
          
          echo "Checking for hardcoded development URLs..."
          if grep -r "127.0.0.1" dist/ --exclude-dir=node_modules; then
            echo "❌ Found hardcoded development URLs"
            exit 1
          fi
          
          echo "✅ No hardcoded development URLs found"

      - name: 🔍 Validate HTML structure
        run: |
          echo "Validating HTML structure..."
          for html_file in $(find dist/ -name "*.html"); do
            if ! grep -q "<!DOCTYPE html>" "$html_file"; then
              echo "❌ Missing DOCTYPE in $html_file"
              exit 1
            fi
            if ! grep -q "<title>" "$html_file"; then
              echo "❌ Missing title in $html_file"
              exit 1
            fi
          done
          echo "✅ All HTML files have valid structure"

      - name: 🔍 Check JSON validity
        run: |
          echo "Validating JSON files..."
          for json_file in $(find dist/ -name "*.json"); do
            if ! python -m json.tool "$json_file" > /dev/null 2>&1; then
              echo "❌ Invalid JSON in $json_file"
              exit 1
            fi
          done
          echo "✅ All JSON files are valid"

  deploy-preview:
    name: 🚀 Deploy Preview
    runs-on: ubuntu-latest
    needs: test-build-output
    if: github.event_name == 'pull_request'
    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 📊 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: dist/

      - name: 🚀 Deploy to GitHub Pages (Preview)
        if: github.event_name == 'pull_request'
        run: |
          echo "🚀 Would deploy preview to GitHub Pages"
          echo "📁 Build size: $(du -sh dist/ | cut -f1)"
          echo "📊 Files ready for deployment: $(find dist/ -type f | wc -l)"

  production-deployment:
    name: 🌟 Production Deployment
    runs-on: ubuntu-latest
    needs: test-build-output
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build for production
        run: npm run build
        env:
          PUBLIC_BASE_URL: /LexMX

      - name: 🚀 Final validation
        run: |
          chmod +x scripts/validate-deployment.js
          node scripts/validate-deployment.js

      - name: ⚙️ Setup GitHub Pages
        uses: actions/configure-pages@v5

      - name: 📤 Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 🎉 Deployment complete
        run: |
          echo "🎉 Deployment successful!"
          echo "🌐 Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "📊 Build completed at: $(date)"

  post-deploy-validation:
    name: ✅ Post-Deploy Validation
    runs-on: ubuntu-latest
    needs: production-deployment
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: ⏰ Wait for deployment
        run: sleep 30

      - name: 🔍 Validate live site
        run: |
          echo "🔍 Validating live deployment..."
          SITE_URL="https://artemiopadilla.github.io/LexMX"
          
          # Test home page
          if curl -f -s "$SITE_URL/" > /dev/null; then
            echo "✅ Home page accessible"
          else
            echo "❌ Home page not accessible"
            exit 1
          fi
          
          # Test key pages
          for path in "/chat" "/admin/documents" "/admin/embeddings"; do
            if curl -f -s "$SITE_URL$path" > /dev/null; then
              echo "✅ $path accessible"
            else
              echo "❌ $path not accessible"
              exit 1
            fi
          done
          
          # Test static assets
          for asset in "/manifest.json" "/favicon.svg"; do
            if curl -f -s "$SITE_URL$asset" > /dev/null; then
              echo "✅ $asset accessible"
            else
              echo "❌ $asset not accessible"
              exit 1
            fi
          done
          
          echo "🎉 All post-deployment validations passed!"