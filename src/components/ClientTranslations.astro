---
// Client-side translation loader
import es from '../i18n/locales/es.json';
import en from '../i18n/locales/en.json';

// Create a safe script that embeds the translations
const translationsScript = `
  window.__translations = {
    es: ${JSON.stringify(es)},
    en: ${JSON.stringify(en)}
  };
`;
---

<script is:inline set:html={translationsScript}></script>

<script>
  function applyTranslations() {
    try {
      // Get language from localStorage, handle both JSON and plain string formats
      let lang = localStorage.getItem('language');
      
      // Handle various storage formats
      if (lang) {
        // If it's already just "es" or "en", use it
        if (lang === 'es' || lang === 'en') {
          // Already in correct format
        } else if (lang.startsWith('"') && lang.endsWith('"')) {
          // Remove surrounding quotes
          lang = lang.slice(1, -1);
        } else {
          // Try to parse as JSON
          try {
            lang = JSON.parse(lang);
          } catch (e) {
            console.warn('Failed to parse language from localStorage, defaulting to es');
            lang = 'es';
          }
        }
      } else {
        lang = 'es'; // Default language
      }
      
      // Ensure lang is a valid string
      if (typeof lang !== 'string' || (lang !== 'es' && lang !== 'en')) {
        console.warn(`Invalid language value: ${lang}, defaulting to es`);
        lang = 'es';
      }
      
      const translations = window.__translations[lang] || window.__translations.es;
      
      if (!translations) {
        console.error('Translations not found for language:', lang);
        return;
      }
      
      // Update all i18n elements
      document.querySelectorAll('[data-i18n]').forEach((element) => {
        const key = element.getAttribute('data-i18n');
        if (!key) return;
        
        // Get translation value
        const keys = key.split('.');
        let value = translations;
        
        for (const k of keys) {
          value = value?.[k];
          if (value === undefined) break;
        }
        
        if (typeof value === 'string') {
          element.textContent = value;
        }
      });
      
      // Update placeholders
      document.querySelectorAll('[data-i18n-placeholder]').forEach((element) => {
        const key = element.getAttribute('data-i18n-placeholder');
        if (!key) return;
        
        const keys = key.split('.');
        let value = translations;
        
        for (const k of keys) {
          value = value?.[k];
          if (value === undefined) break;
        }
        
        if (typeof value === 'string' && element instanceof HTMLInputElement) {
          element.placeholder = value;
        }
      });
      
      // Update aria-labels
      document.querySelectorAll('[data-i18n-aria]').forEach((element) => {
        const key = element.getAttribute('data-i18n-aria');
        if (!key) return;
        
        const keys = key.split('.');
        let value = translations;
        
        for (const k of keys) {
          value = value?.[k];
          if (value === undefined) break;
        }
        
        if (typeof value === 'string') {
          element.setAttribute('aria-label', value);
        }
      });
      
      // Update document language
      document.documentElement.lang = lang;
      
    } catch (error) {
      console.error('Error applying translations:', error);
    }
  }
  
  // Apply translations immediately if DOM is ready, otherwise on load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', applyTranslations);
  } else {
    applyTranslations();
  }
  
  // Listen for custom language change event
  window.addEventListener('languageChanged', (e) => {
    // Prevent any navigation attempts
    if (e.detail && e.detail.language) {
      e.preventDefault();
      e.stopPropagation();
      applyTranslations();
    }
  });
  
  // Listen for storage changes (from other tabs)
  window.addEventListener('storage', (e) => {
    if (e.key === 'language') {
      applyTranslations();
    }
  });
  
  // Make applyTranslations available globally
  window.applyTranslations = applyTranslations;
  
  // Prevent accidental navigation to language routes
  document.addEventListener('click', (e) => {
    const target = e.target;
    if (target && target.closest) {
      const link = target.closest('a');
      if (link) {
        const href = link.getAttribute('href');
        if (href && (href === '/es/' || href === '/en/')) {
          e.preventDefault();
          e.stopPropagation();
          console.warn('Prevented navigation to language route:', href);
        }
      }
    }
  }, true);
</script>